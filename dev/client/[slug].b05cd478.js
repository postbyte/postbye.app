import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as validate_slots, e as element, t as text, f as claim_element, g as children, h as claim_text, b as detach_dev, j as add_location, k as insert_dev, l as append_dev, n as noop, a as space, u as create_component, q as query_selector_all, c as claim_space, w as claim_component, m as attr_dev, x as mount_component, p as set_data_dev, y as transition_in, z as transition_out, A as destroy_component } from './client.140c5030.js';

/* src/components/Bio.svelte generated by Svelte v3.20.1 */

const file = "src/components/Bio.svelte";

function create_fragment(ctx) {
	let div;
	let p;
	let t;

	const block = {
		c: function create() {
			div = element("div");
			p = element("p");
			t = text("This is a bio.");
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", {});
			var div_nodes = children(div);
			p = claim_element(div_nodes, "P", {});
			var p_nodes = children(p);
			t = claim_text(p_nodes, "This is a bio.");
			p_nodes.forEach(detach_dev);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(p, file, 5, 2, 27);
			add_location(div, file, 4, 0, 19);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, p);
			append_dev(p, t);
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props) {
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Bio> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Bio", $$slots, []);
	return [];
}

class Bio extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Bio",
			options,
			id: create_fragment.name
		});
	}
}

/* src/routes/blog/[slug].svelte generated by Svelte v3.20.1 */
const file$1 = "src/routes/blog/[slug].svelte";

function create_fragment$1(ctx) {
	let t0;
	let title_value;
	let t1;
	let section;
	let article1;
	let header;
	let p;
	let t2_value = /*post*/ ctx[0].printDate + "";
	let t2;
	let t3;
	let t4_value = /*post*/ ctx[0].printReadingTime + "";
	let t4;
	let t5;
	let h1;
	let t6_value = /*post*/ ctx[0].title + "";
	let t6;
	let t7;
	let hr0;
	let t8;
	let div;
	let article0;
	let raw_value = /*post*/ ctx[0].html + "";
	let t9;
	let hr1;
	let t10;
	let current;
	document.title = title_value = /*post*/ ctx[0].title;
	const bio = new Bio({ $$inline: true });

	const block = {
		c: function create() {
			t0 = text("`\n");
			t1 = space();
			section = element("section");
			article1 = element("article");
			header = element("header");
			p = element("p");
			t2 = text(t2_value);
			t3 = text(" ~ ");
			t4 = text(t4_value);
			t5 = space();
			h1 = element("h1");
			t6 = text(t6_value);
			t7 = space();
			hr0 = element("hr");
			t8 = space();
			div = element("div");
			article0 = element("article");
			t9 = space();
			hr1 = element("hr");
			t10 = space();
			create_component(bio.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			t0 = claim_text(nodes, "`\n");
			const head_nodes = query_selector_all("[data-svelte=\"svelte-iu3vwn\"]", document.head);
			head_nodes.forEach(detach_dev);
			t1 = claim_space(nodes);
			section = claim_element(nodes, "SECTION", { class: true });
			var section_nodes = children(section);
			article1 = claim_element(section_nodes, "ARTICLE", { class: true });
			var article1_nodes = children(article1);
			header = claim_element(article1_nodes, "HEADER", {});
			var header_nodes = children(header);
			p = claim_element(header_nodes, "P", {});
			var p_nodes = children(p);
			t2 = claim_text(p_nodes, t2_value);
			t3 = claim_text(p_nodes, " ~ ");
			t4 = claim_text(p_nodes, t4_value);
			p_nodes.forEach(detach_dev);
			t5 = claim_space(header_nodes);
			h1 = claim_element(header_nodes, "H1", {});
			var h1_nodes = children(h1);
			t6 = claim_text(h1_nodes, t6_value);
			h1_nodes.forEach(detach_dev);
			t7 = claim_space(header_nodes);
			hr0 = claim_element(header_nodes, "HR", {});
			header_nodes.forEach(detach_dev);
			t8 = claim_space(article1_nodes);
			div = claim_element(article1_nodes, "DIV", { class: true });
			var div_nodes = children(div);
			article0 = claim_element(div_nodes, "ARTICLE", { class: true });
			var article0_nodes = children(article0);
			article0_nodes.forEach(detach_dev);
			t9 = claim_space(div_nodes);
			hr1 = claim_element(div_nodes, "HR", {});
			t10 = claim_space(div_nodes);
			claim_component(bio.$$.fragment, div_nodes);
			div_nodes.forEach(detach_dev);
			article1_nodes.forEach(detach_dev);
			section_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(p, file$1, 31, 6, 636);
			add_location(h1, file$1, 32, 6, 692);
			add_location(hr0, file$1, 33, 6, 720);
			add_location(header, file$1, 30, 4, 621);
			attr_dev(article0, "class", "content");
			add_location(article0, file$1, 36, 6, 775);
			add_location(hr1, file$1, 39, 6, 850);
			attr_dev(div, "class", "container");
			add_location(div, file$1, 35, 4, 745);
			attr_dev(article1, "class", "col");
			add_location(article1, file$1, 29, 2, 595);
			attr_dev(section, "class", "cols");
			add_location(section, file$1, 28, 0, 570);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, t1, anchor);
			insert_dev(target, section, anchor);
			append_dev(section, article1);
			append_dev(article1, header);
			append_dev(header, p);
			append_dev(p, t2);
			append_dev(p, t3);
			append_dev(p, t4);
			append_dev(header, t5);
			append_dev(header, h1);
			append_dev(h1, t6);
			append_dev(header, t7);
			append_dev(header, hr0);
			append_dev(article1, t8);
			append_dev(article1, div);
			append_dev(div, article0);
			article0.innerHTML = raw_value;
			append_dev(div, t9);
			append_dev(div, hr1);
			append_dev(div, t10);
			mount_component(bio, div, null);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			if ((!current || dirty & /*post*/ 1) && title_value !== (title_value = /*post*/ ctx[0].title)) {
				document.title = title_value;
			}

			if ((!current || dirty & /*post*/ 1) && t2_value !== (t2_value = /*post*/ ctx[0].printDate + "")) set_data_dev(t2, t2_value);
			if ((!current || dirty & /*post*/ 1) && t4_value !== (t4_value = /*post*/ ctx[0].printReadingTime + "")) set_data_dev(t4, t4_value);
			if ((!current || dirty & /*post*/ 1) && t6_value !== (t6_value = /*post*/ ctx[0].title + "")) set_data_dev(t6, t6_value);
			if ((!current || dirty & /*post*/ 1) && raw_value !== (raw_value = /*post*/ ctx[0].html + "")) article0.innerHTML = raw_value;		},
		i: function intro(local) {
			if (current) return;
			transition_in(bio.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(bio.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(section);
			destroy_component(bio);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

async function preload({ params, query }) {
	// the `slug` parameter is available because
	// this file is called [slug].html
	const res = await this.fetch(`blog/${params.slug}.json`);

	const data = await res.json();

	if (res.status === 200) {
		return { post: data };
	} else {
		this.error(res.status, data.message);
	}
}

function instance$1($$self, $$props, $$invalidate) {
	let { post } = $$props;
	const writable_props = ["post"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<U5Bslugu5D> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("U5Bslugu5D", $$slots, []);

	$$self.$set = $$props => {
		if ("post" in $$props) $$invalidate(0, post = $$props.post);
	};

	$$self.$capture_state = () => ({ preload, Bio, post });

	$$self.$inject_state = $$props => {
		if ("post" in $$props) $$invalidate(0, post = $$props.post);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [post];
}

class U5Bslugu5D extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, { post: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "U5Bslugu5D",
			options,
			id: create_fragment$1.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*post*/ ctx[0] === undefined && !("post" in props)) {
			console.warn("<U5Bslugu5D> was created without expected prop 'post'");
		}
	}

	get post() {
		throw new Error("<U5Bslugu5D>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set post(value) {
		throw new Error("<U5Bslugu5D>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default U5Bslugu5D;
export { preload };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiW3NsdWddLmIwNWNkNDc4LmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvcm91dGVzL2Jsb2cvW3NsdWddLnN2ZWx0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyI8c2NyaXB0IGNvbnRleHQ9XCJtb2R1bGVcIj5cbiAgZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHByZWxvYWQoeyBwYXJhbXMsIHF1ZXJ5IH0pIHtcbiAgICAvLyB0aGUgYHNsdWdgIHBhcmFtZXRlciBpcyBhdmFpbGFibGUgYmVjYXVzZVxuICAgIC8vIHRoaXMgZmlsZSBpcyBjYWxsZWQgW3NsdWddLmh0bWxcbiAgICBjb25zdCByZXMgPSBhd2FpdCB0aGlzLmZldGNoKGBibG9nLyR7cGFyYW1zLnNsdWd9Lmpzb25gKTtcbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzLmpzb24oKTtcblxuICAgIGlmIChyZXMuc3RhdHVzID09PSAyMDApIHtcbiAgICAgIHJldHVybiB7IHBvc3Q6IGRhdGEgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5lcnJvcihyZXMuc3RhdHVzLCBkYXRhLm1lc3NhZ2UpO1xuICAgIH1cbiAgfVxuPC9zY3JpcHQ+XG5cbjxzY3JpcHQ+XG4gIGltcG9ydCBCaW8gZnJvbSBcIi4uLy4uL2NvbXBvbmVudHMvQmlvLnN2ZWx0ZVwiO1xuICBleHBvcnQgbGV0IHBvc3Q7XG48L3NjcmlwdD5cblxuPHN0eWxlPlxuXG48L3N0eWxlPlxuXG5gXG48c3ZlbHRlOmhlYWQ+XG4gIDx0aXRsZT57cG9zdC50aXRsZX08L3RpdGxlPlxuPC9zdmVsdGU6aGVhZD5cbjxzZWN0aW9uIGNsYXNzPVwiY29sc1wiPlxuICA8YXJ0aWNsZSBjbGFzcz1cImNvbFwiPlxuICAgIDxoZWFkZXI+XG4gICAgICA8cD57cG9zdC5wcmludERhdGV9IH4ge3Bvc3QucHJpbnRSZWFkaW5nVGltZX08L3A+XG4gICAgICA8aDE+e3Bvc3QudGl0bGV9PC9oMT5cbiAgICAgIDxociAvPlxuICAgIDwvaGVhZGVyPlxuICAgIDxkaXYgY2xhc3M9XCJjb250YWluZXJcIj5cbiAgICAgIDxhcnRpY2xlIGNsYXNzPVwiY29udGVudFwiPlxuICAgICAgICB7QGh0bWwgcG9zdC5odG1sfVxuICAgICAgPC9hcnRpY2xlPlxuICAgICAgPGhyIC8+XG4gICAgICA8QmlvIC8+XG4gICAgPC9kaXY+XG4gIDwvYXJ0aWNsZT5cbjwvc2VjdGlvbj5cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7eUJBK0JVLEdBQUksSUFBQyxTQUFTOzs7eUJBQUssR0FBSSxJQUFDLGdCQUFnQjs7Ozt5QkFDdkMsR0FBSSxJQUFDLEtBQUs7Ozs7Ozs7MEJBS04sR0FBSSxJQUFDLElBQUk7Ozs7O3lDQVhkLEdBQUksSUFBQyxLQUFLOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O21GQUFWLEdBQUksSUFBQyxLQUFLOzs7OzZFQUtWLEdBQUksSUFBQyxTQUFTOzZFQUFLLEdBQUksSUFBQyxnQkFBZ0I7NkVBQ3ZDLEdBQUksSUFBQyxLQUFLOytFQUtOLEdBQUksSUFBQyxJQUFJOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztlQXBDQSxPQUFPLEdBQUcsTUFBTSxFQUFFLEtBQUs7OztPQUdyQyxHQUFHLFNBQVMsSUFBSSxDQUFDLEtBQUssU0FBUyxNQUFNLENBQUMsSUFBSTs7T0FDMUMsSUFBSSxTQUFTLEdBQUcsQ0FBQyxJQUFJOztLQUV2QixHQUFHLENBQUMsTUFBTSxLQUFLLEdBQUc7V0FDWCxJQUFJLEVBQUUsSUFBSTs7RUFFbkIsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxPQUFPOzs7OztPQVI1QixJQUFJOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsifQ==
